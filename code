#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

void binaryToText(const char* binary, char* text);
void textToBinary(const char* text, char* binary);
void rot13(char* str);
void encryptHex(char* message);
void decryptHex(char* message);
void encryptDecrypt(char message[]);

int main()
{
    do {
        int order;
        printf("\n\033[1;37m--------Lucifer Encryption/Decryption--------\n");
        printf("\033[1;34m1. Binary\n2. ROT13\n3. HEX\n4. Substitution Ciphers\n5. Exit\n");
        printf("\033[1;35mEnter your choice: \033[1;33m");
        scanf("%d", &order);
        getchar(); // Consume newline character

        switch (order) {
            case 1:
            {
                char input[256];
                char output[256];
                int which;
                printf("\033[1;34m1. Encrypt\n2. Decrypt\n");
                printf("\033[1;35mEnter your choice: \33[1;33m");
                scanf("%d", &which);
                getchar();// Consume newline character

                if (which == 1)
                {
                    printf("\033[1;35mEnter text: \033[1;37m");
                    fgets(input, sizeof(input) - 1, stdin);
                    input[strcspn(input, "\n")] = '\0';

                    textToBinary(input, output);
                    printf("\033[1;35mText to Binary:\033[1;32m %s\n", output);
                }
                else if (which == 2)
                {
                    printf("\033[1;35mEnter binary: \033[1;37m");
                    fgets(input, sizeof(input) - 1, stdin);
                    input[strcspn(input, "\n")] = '\0';

                    binaryToText(input, output);
                    printf("\033[1;35mBinary to Text: \033[1;32m%s\n", output);
                }
                else
                {
                    printf("\033[1;31mInvalid choice\n");
                }
                break;
            }

            case 2:
            {
                char message[100];
                printf("\033[1;35mEnter a message:\033[1;37m ");
                fgets(message, sizeof(message), stdin);
                message[strcspn(message, "\n")] = '\0';
                rot13(message);
                printf("\033[1;35mEncrypted/Decrypted message: \033[1;32m%s\n", message);
                break;
            }

            case 3:
            {
                char input[256];
                char output[256];
                int which;
                printf("\033[1;34m1. Encrypt\n2. Decrypt\n");
                printf("\033[1;35mEnter your choice: \033[1;33m");
                scanf("%d", &which);
                getchar(); // Consume newline character

                if (which == 1)
                {
                    printf("\033[1;35mEnter plaintext: \033[1;37m");
                    fgets(input, sizeof(input) - 1, stdin);
                    input[strcspn(input, "\n")] = '\0';

                    encryptHex(input);

                }
                else if (which == 2)
                {
                    printf("\033[1;35mEnter ciphertext: \033[1;37m");
                    fgets(input, sizeof(input) - 1, stdin);
                    input[strcspn(input, "\n")] = '\0';

                    decryptHex(input);

                }
                else
                {
                    printf("\033[1;31mInvalid choice\n");
                }
                break;
            }

            case 4:
             {
                char message[100];
                printf("\033[1;35mEnter a message: \033[1;37m");
                fgets(message, sizeof(message), stdin);
                message[strcspn(message, "\n")] = '\0';
                encryptDecrypt(message);
                break;
            }

            case 5:
                printf("\033[1;32mThank you!!\n");
                exit(0);
                break;

            default:
                printf("\033[1;31mInvalid choice\n");
        }
    } while (1);

    return 0;
}


// Binary Encryption/Decryption
void binaryToText(const char* binary, char* text) {
    size_t length = strlen(binary) / 8;
    for (size_t i = 0; i < length; i++) {
        char character = 0;
        for (int j = 0; j < 8; j++) {
            character = (character << 1) + (binary[(i * 8) + j] - '0');
        }
        text[i] = character;
    }
    text[length] = '\0';
}

void textToBinary(const char* text, char* binary) {
    size_t length = strlen(text);
    for (size_t i = 0; i < length; i++) {
        char character = text[i];
        for (int j = 7; j >= 0; j--) {
            binary[(i * 8) + (7 - j)] = ((character >> j) & 1) ? '1' : '0';
        }
    }
    binary[length * 8] = '\0';
}



// ROT13 Encryption/Decryption
void rot13(char* str) {
    int i = 0;
    char c;

    while (str[i] != '\0') {
        c = str[i];

        if (isalpha(c)) {
            if (islower(c)) {
                c = ((c - 'a') + 13) % 26 + 'a';
            } else {
                c = ((c - 'A') + 13) % 26 + 'A';
            }
        }

        str[i] = c;
        i++;
    }
}




// Hex Encryption/Decryption
// Function to perform hex encryption
void encryptHex(char* message) {
    int len = strlen(message);
    printf("\033[1;35mEncrypted message: \033[1;32m");
    for (int i = 0; i < len; i++) {
        printf("%02X", message[i]);
    }
    printf("\n");
}

// Function to perform hex decryption
void decryptHex(char* message) {
    int len = strlen(message);
    printf("\033[1;35mDecrypted message: \033[1;32m");
    for (int i = 0; i < len; i += 2) {
        char hex[3];
        hex[0] = message[i];
        hex[1] = message[i + 1];
        hex[2] = '\0';
        int decimal;
        sscanf(hex, "%x", &decimal);
        printf("%c", decimal);
    }
    printf("\n");
}


//Substitution Cliphers Encryption/Decryption
void encryptDecrypt(char message[]) {
    int i = 0;
    char ch;

    while (message[i] != '\0') {
        ch = message[i];

        if (isalpha(ch)) {
            if (islower(ch)) {
                ch = 'z' - (ch - 'a');
            } else {
                ch = 'Z' - (ch - 'A');
            }
        }

        message[i] = ch;
        i++;
    }

    printf("\033[1;35mEncrypted/Decrypted message: \033[1;32m%s\n", message);
}
